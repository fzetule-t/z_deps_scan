"""
Django settings for z_deps_scan project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import base64
import os
from datetime import datetime, timezone
from logging.handlers import TimedRotatingFileHandler
from pathlib import Path

import environ

from deps.utils_str import isNotBlank


class OsType:
    WINDOWS = 'WINDOWS'
    UNIX = 'UNIX'


def getOsType():
    if os.name == 'posix':  # Unix/Linux
        return OsType.UNIX
    elif os.name == 'nt':  # Windows
        return OsType.WINDOWS


OS_TYPE = getOsType()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Initialize env
env = environ.Env()
envFile = os.path.join(BASE_DIR, 'z_deps_scan', '.env')
print(f'Reading env from: {envFile}')
environ.Env.read_env(envFile)


MAVEN_HOME = env('MAVEN_HOME')
MAVEN_EXEC = MAVEN_HOME + '/bin/mvn'

GRADLEW_EXEC = ''
if OS_TYPE == OsType.WINDOWS:
    MAVEN_EXEC += '.cmd'
    GRADLEW_EXEC = 'gradlew.bat'
else:
    GRADLEW_EXEC = 'gradlew'

MAVEN_SETTINGS_PATH = env('MAVEN_SETTINGS_PATH')
DATA_DIR = env('DATA_DIR')

CHECK_LATEST_VERSION = env.bool('CHECK_LATEST_VERSION', False)
OSS_ACTIVATED = env.bool('OSS_ACTIVATED', False)
OSS_INDEX_API_USERNAME = env.str('OSS_INDEX_API_USERNAME')
OSS_INDEX_API_TOKEN = env.str('OSS_INDEX_API_TOKEN')

if OSS_ACTIVATED and isNotBlank(OSS_INDEX_API_USERNAME) and isNotBlank(OSS_INDEX_API_TOKEN):
    OSS_CREDENTIALS = f'{OSS_INDEX_API_USERNAME}:{OSS_INDEX_API_TOKEN}'
    OSS_CREDENTIALS_ENCODED = base64.b64encode(OSS_CREDENTIALS.encode()).decode()
    OSS_ACTIVATED = True
else:
    OSS_CREDENTIALS = None
    OSS_CREDENTIALS_ENCODED = None
    OSS_ACTIVATED = False

LOG_DIR = DATA_DIR
LOG_GENERAL_LOG_FILE_PATH = os.path.join(LOG_DIR, 'general.log')

LOG_LEVEL = 'INFO'
LOG_FORMAT = '%(asctime)s %(levelname)s [%(threadName)s]: %(message)s'
MAX_WORKERS = 50

KEY_TITLE = "aaa_title"

USE_L10N = False
USE_TZ = True

# SITE_ID = 1

# https://docs.djangoproject.com/en/dev/ref/settings/#date-format
DATE_FORMAT = "Y/m/d"  # Change this to your desired format
TIME_FORMAT = "H:i:s"
DATETIME_FORMAT = "Y/m/d H:i:s"
SHORT_DATETIME_FORMAT = "Y/m/d H:i:s"

DATE_INPUT_FORMATS = ["%Y-%m-%d"]  # 10/25/2006'
DATETIME_INPUT_FORMATS = ["%Y-%m-%d %H:%M:%S"]  # '10/25/2006'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qj#uhjh7!r(9_rvo!%h^w9o_%4oibl!swd=ubae(3*=qn=k&=-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'django.contrib.sites',
    'django.contrib.staticfiles',
    # 'rest_framework',
    'django_extensions',
    'deps.apps.DepsConfig'
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = "/deps/Repo/list"
LOGOUT_REDIRECT_URL = "/accounts/login"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # TODO Bad practice to handle these static request with same wsgi server
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'deps.middleware.CustomErrorHandlerMiddleware',
    'deps.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'z_deps_scan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'z_deps_scan.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


class RestartableTimedRotatingFileHandler(TimedRotatingFileHandler):
    def __init__(self, filename, when='midnight', interval=1, backupCount=7, encoding=None, delay=False, utc=False,
                 atTime=None, **kwargs):
        super().__init__(filename, when, interval, backupCount, encoding, delay, utc, atTime, **kwargs)
        self.check_and_rollover()

    def check_and_rollover(self):
        if os.path.exists(self.baseFilename):
            timestamp = os.path.getmtime(self.baseFilename)
            last_modified_time = datetime.fromtimestamp(timestamp, timezone.utc)
            current_time = datetime.now(timezone.utc)
            if last_modified_time.date() != current_time.date():
                self.doRollover()


#  TODO TimedRotatingFileHandler not working concurrently
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': LOG_FORMAT,
        }
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'general_file': {
            'level': LOG_LEVEL,
            'class': 'z_deps_scan.settings.RestartableTimedRotatingFileHandler',
            'filename': LOG_GENERAL_LOG_FILE_PATH,
            'formatter': 'default',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 7,
        },
    },
    'loggers': {
        'consoleAndGeneralFile': {
            'handlers': ['console', 'general_file'],
            'level': LOG_LEVEL,
            'propagate': True,
        }
    },
}
